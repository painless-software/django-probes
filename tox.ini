[tox]
envlist =
    isort
    flake8
    pylint
    bandit
    # Python/Django combinations that are officially supported
    py3{6,7,8,9,10}-django32
    py3{8,9,10,11}-django41
    py3{8,9,10,11}-django42
    package
    clean

[gh-actions]
python =
    3.6: py36
    3.7: py37
    3.8: py38
    3.9: py39
    3.10: py310
    3.11: py311

[gh-actions:env]
DJANGO =
    3.2: django32
    4.1: django41
    4.2: django42

[testenv]
description = Unit tests
deps =
    coverage[toml]
    pytest-django
    django32: Django>=3.2,<4.0
    django41: Django>=4.1,<4.2
    django42: Django>=4.2,<5.0
commands =
    coverage run -m pytest {posargs}
    coverage report

[testenv:bandit]
description = PyCQA security linter
skip_install = true
deps = bandit[toml]
commands = bandit -c pyproject.toml -r {posargs:django_probes}

[testenv:clean]
description = Remove Python bytecode and other debris
skip_install = true
deps = pyclean
commands =
    pyclean {posargs:. --debris --erase tests/testproject.sqlite --yes --verbose}

[testenv:flake8]
description = Static code analysis and code style
skip_install = true
deps = flake8-django
commands = flake8 {posargs}

[testenv:isort]
description = Ensure imports are ordered consistently
skip_install = true
deps = isort[colors]
commands = isort --check-only --diff {posargs:django_probes setup.py tests}

[testenv:package]
description = Build package and check metadata (or upload package)
skip_install = true
deps =
    build
    twine
commands =
    python -m build
    twine {posargs:check --strict} dist/*
passenv =
    TWINE_USERNAME
    TWINE_PASSWORD
    TWINE_REPOSITORY_URL

[testenv:pylint]
description = Check for errors and code smells
deps =
    django
    pylint-django
commands =
    pylint {posargs:django_probes setup}

[flake8]
exclude = .cache,.git,.tox,build,dist,django_probes.egg-info
max-line-length = 88
